rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isAuthenticated() && request.auth.token.role == 'admin';
    }
    
    function isFormateur() {
      return isAuthenticated() && request.auth.token.role == 'formateur';
    }
    
    function isStudent() {
      return isAuthenticated() && request.auth.token.role == 'student';
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isCourseInstructor(courseId) {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/courses/$(courseId)) &&
             get(/databases/$(database)/documents/courses/$(courseId)).data.instructorId == request.auth.uid;
    }
    
    function isEnrolledInCourse(courseId) {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/progress/$(request.auth.uid + '_' + courseId));
    }

    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated() && (isOwner(userId) || isAdmin());
      allow create: if isAuthenticated() && isAdmin();
      allow update: if isAuthenticated() && (isOwner(userId) || isAdmin());
      allow delete: if isAuthenticated() && isAdmin();
    }

    // Courses collection
    match /courses/{courseId} {
      allow read: if isAuthenticated() && (
        isAdmin() || 
        isFormateur() || 
        (isStudent() && resource.data.status == 'published')
      );
      allow create: if isAuthenticated() && isFormateur();
      allow update: if isAuthenticated() && (
        isAdmin() || 
        (isFormateur() && resource.data.instructorId == request.auth.uid)
      );
      allow delete: if isAuthenticated() && (
        isAdmin() || 
        (isFormateur() && resource.data.instructorId == request.auth.uid)
      );
    }

    // Progress collection (enrollments)
    match /progress/{progressId} {
      allow read: if isAuthenticated() && (
        isAdmin() || 
        isOwner(resource.data.userId) ||
        (isFormateur() && isCourseInstructor(resource.data.courseId))
      );
      allow create: if isAuthenticated() && (
        isAdmin() || 
        (isStudent() && isOwner(request.resource.data.userId))
      );
      allow update: if isAuthenticated() && (
        isAdmin() || 
        isOwner(resource.data.userId) ||
        (isFormateur() && isCourseInstructor(resource.data.courseId))
      );
      allow delete: if isAuthenticated() && isAdmin();
    }

    // Enrollment requests
    match /enrollmentRequests/{requestId} {
      allow read: if isAuthenticated() && (
        isAdmin() || 
        isOwner(resource.data.studentId) ||
        (isFormateur() && isCourseInstructor(resource.data.courseId))
      );
      allow create: if isAuthenticated() && (
        isStudent() && isOwner(request.resource.data.studentId)
      );
      allow update: if isAuthenticated() && isAdmin();
      allow delete: if isAuthenticated() && isAdmin();
    }

    // Notifications
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && isOwner(resource.data.userId);
      allow create: if isAuthenticated() && (
        isAdmin() || 
        isOwner(request.resource.data.userId)
      );
      allow update: if isAuthenticated() && isOwner(resource.data.userId);
      allow delete: if isAuthenticated() && isOwner(resource.data.userId);
    }

    // Community posts
    match /posts/{postId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && isOwner(request.resource.data.authorId);
      allow update: if isAuthenticated() && (
        isAdmin() || 
        isOwner(resource.data.authorId)
      );
      allow delete: if isAuthenticated() && (
        isAdmin() || 
        isOwner(resource.data.authorId)
      );
    }

    // Comments
    match /comments/{commentId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && isOwner(request.resource.data.authorId);
      allow update: if isAuthenticated() && (
        isAdmin() || 
        isOwner(resource.data.authorId)
      );
      allow delete: if isAuthenticated() && (
        isAdmin() || 
        isOwner(resource.data.authorId)
      );
    }

    // Chat messages
    match /chatMessages/{messageId} {
      allow read: if isAuthenticated() && (
        isAdmin() || 
        isOwner(resource.data.senderId) ||
        isEnrolledInCourse(resource.data.courseId)
      );
      allow create: if isAuthenticated() && (
        isOwner(request.resource.data.senderId) &&
        isEnrolledInCourse(request.resource.data.courseId)
      );
      allow update: if isAuthenticated() && isOwner(resource.data.senderId);
      allow delete: if isAuthenticated() && (
        isAdmin() || 
        isOwner(resource.data.senderId)
      );
    }

    // Certificates
    match /certificates/{certificateId} {
      allow read: if isAuthenticated() && (
        isAdmin() || 
        isOwner(resource.data.userId)
      );
      allow create: if isAuthenticated() && isAdmin();
      allow update: if isAuthenticated() && isAdmin();
      allow delete: if isAuthenticated() && isAdmin();
    }

    // Payments
    match /payments/{paymentId} {
      allow read: if isAuthenticated() && (
        isAdmin() || 
        isOwner(resource.data.userId)
      );
      allow create: if isAuthenticated() && isOwner(request.resource.data.userId);
      allow update: if isAuthenticated() && isAdmin();
      allow delete: if isAuthenticated() && isAdmin();
    }

    // System settings (admin only)
    match /settings/{settingId} {
      allow read, write: if isAuthenticated() && isAdmin();
    }

    // Analytics (admin only)
    match /analytics/{analyticsId} {
      allow read, write: if isAuthenticated() && isAdmin();
    }
  }
}
